# -*- coding: utf-8 -*-
"""LVDSUSR172_Niveditha_4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x9P4AaSncSrf9UufBGzXWa8Y5D3YjwWL
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split

df = pd.read_csv("/content/anomaly_train.csv").drop('TransactionID',axis = 1)

df.isnull().sum()

print(df)

numerical_columns = df.columns

# Create a box plot for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(20, 6))
    sns.histplot(df[column])
    plt.title(f'Bar Plot of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['Type'] = le.fit_transform(df['Type'])
df['Location'] = le.fit_transform(df['Location'])

df.columns

sns.boxplot(df)

#IQR
q1 = np.percentile(df['Amount'],0.25)
q3 = np.percentile(df['Amount'],0.75)
print(q1,q3)
iqr = q3-q1
print(iqr)
ul = q3 + 1.5 * iqr
ll = q1 - 1.5 * iqr
print(ul,ll)
dff = df[(df['Amount'] >= ll) & (df['Amount'] <= ul)]

sns.boxplot(dff)

iso_df = df[['Amount', 'Type', 'Time','User']]

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_iso_df = scaler.fit_transform(iso_df)

sns.heatmap(df.corr(), annot = True)

from sklearn.ensemble import IsolationForest
# Fit Isolation Forest
clf = IsolationForest(random_state=0)
clf.fit(X_iso_df)
# Predict outliers
outliers = clf.predict(X_iso_df)
print("Outliers:", outliers)

unique_values, counts = np.unique(outliers, return_counts=True)
outliers_counts_df = pd.DataFrame({'Value': unique_values, 'Count': counts})
print(outliers_counts_df)

#PLOTTING

import matplotlib.pyplot as plt

pred = clf.predict(X_iso_df)
df['anomaly']=pred
outliers=df.loc[df['anomaly']==-1]
outlier_index=list(outliers.index)
#print(outlier_index)
#Find the number of anomalies and normal points here points classified -1 are anomalous
print(df['anomaly'].value_counts())

# Separate normal and outlier points
normal_points = df[df['anomaly'] == 1]  # Assuming 1 represents normal points
outlier_points = df[df['anomaly'] == -1]

# Plot normal points
plt.scatter(normal_points['User'], normal_points['Time'], color='blue', label='Normal')

# Plot outlier points
plt.scatter(outlier_points['User'], outlier_points['Time'], color='red', label='Outlier')

plt.xlabel('User')
plt.ylabel('Time')
plt.title('Scatter plot of User vs Time')
plt.legend()
plt.show()

