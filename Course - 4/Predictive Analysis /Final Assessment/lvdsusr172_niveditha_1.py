# -*- coding: utf-8 -*-
"""LVDSUSR172_Niveditha_1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IMFl8ezfCDTbiETmVjOiUdA7jXSjiCu2
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/Fare prediction.csv")

df['pickup_datetime'] = pd.to_datetime(df['pickup_datetime'],utc = True)
#df['pickup_hour'] = pd.to_timedelta(df['pickup_datetime'], unit = 'h')
#df['pickup_datetime'] = datetime.datetime(df['pickup_datetime'])

df.info()

df.isnull().sum()

print(df)
df.info()

sns.heatmap(df.corr(numeric_only = True), annot = True)

df['Lattitue_diff'] = df['pickup_latitude'] - df['dropoff_latitude']
df['Longitude_diff'] = df['pickup_longitude'] - df['dropoff_longitude']

numerical_columns = df.columns

# Create a box plot for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(20, 6))
    sns.histplot(df[column])
    plt.title(f'Bar Plot of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

#IQR
q1 = np.percentile(df['Total Business Value'],0.25)
q3 = np.percentile(df['Total Business Value'],0.75)
print(q1,q3)
iqr = q3-q1
print(iqr)
ul = q3 + 1.5 * iqr
ll = q1 - 1.5 * iqr
print(ul,ll)
df = df[(df['Total Business Value'] >= ll) & (df['Total Business Value'] <= ul)]

df.columns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

#LINEAR REGRESSION

# X = encoded_df.drop(columns = ["Price"])
X = df[['passenger_count', 'Lattitue_diff', 'Longitude_diff']]
y = df["fare_amount"]

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=40)

# Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

rmse = mean_squared_error(y_test, y_pred,squared=False)
print("Root Mean Squared Error:", rmse)

# Coefficients and intercept
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

r2_s = r2_score(y_test, y_pred)
print("R2 Score:", r2_s)

