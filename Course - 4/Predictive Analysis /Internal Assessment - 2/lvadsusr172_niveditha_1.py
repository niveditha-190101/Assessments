# -*- coding: utf-8 -*-
"""LVADSUSR172_NIVEDITHA_1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YfZFpG3zt-40hzp80IcClV1cKlcHiMbX
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.preprocessing import MinMaxScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.cluster import KMeans
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

wine = pd.read_csv("/content/winequality-red.csv")

wine.isnull().sum()

wine = wine.dropna()

cols = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'sulphates']
for columns in cols:
  wine[columns] = wine.fillna(wine[columns]).mean()

# Plot histograms for numerical columns
for column in wine.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(wine[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()



wine['quality'].value_counts()

wine.info()

plt.figure(figsize = (10,10))
sns.heatmap(wine.corr(), annot = True)

X = wine.iloc[:,:10]
Y = wine.iloc[:,-1]

scale = MinMaxScaler()
scaled_df = scale.fit_transform(X)

len = LabelEncoder()
for column in wine.select_dtypes(include = 'object'):
  wine[column] = len.fit_transform(wine[column])
wine.head()

sse = [] # The sum of Squared Errors =SSE
k_rng = range(1,10)
for k in k_rng:
   km = KMeans(n_clusters=k)
   km.fit(wine)
   sse.append(km.inertia_)

plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(k_rng,sse)

for num in range(1, 6):
  kmeans = KMeans(n_clusters=num, random_state=0)
  kmeans.fit_predict(scaled_df)
  labels = kmeans.labels_
  centers = kmeans.cluster_centers_

  plt.figure(figsize=(8, 6))
  plt.scatter(scaled_df[:, 0], scaled_df[:, 1], c=labels, cmap='viridis', s=50, alpha=0.5)
  plt.title('K-means Clustering')
  plt.xlabel('X1')
  plt.ylabel('X2')
  plt.legend()
  plt.show()

kmeans = KMeans(n_clusters=2, random_state=0)
kmeans.fit(scaled_df)
labels = kmeans.labels_
centers = kmeans.cluster_centers_

plt.figure(figsize=(8, 6))
plt.scatter(scaled_df[:, 0], scaled_df[:, 1], c=labels, cmap='viridis', s=50, alpha=0.5)
plt.title('K-means Clustering')
plt.xlabel('X1')
plt.ylabel('X2')
plt.legend()
plt.show()

from sklearn.metrics import silhouette_score
silhouette_score(scaled_df, labels)

