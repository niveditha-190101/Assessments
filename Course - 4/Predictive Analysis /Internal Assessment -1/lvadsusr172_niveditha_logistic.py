# -*- coding: utf-8 -*-
"""LVADSUSR172_NIVEDITHA_logistic

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gp9KCzSSJV8eOiEWKzIANNYNh6FcdvQ0
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler, LabelEncoder

booking = pd.read_csv("/content/booking.csv")

booking

booking.columns[1:16]

booking = booking.drop(columns = ['Booking_ID', 'date of reservation'])

booking.info()

booking.isnull().sum()

booking['average price'] = booking['average price'].fillna(booking['average price'].mean())
booking['room type'] = booking['room type'].fillna(booking['room type'].mode()[0])

booking.isnull().sum()

booking.describe()

import matplotlib.pyplot as plt
numerical_columns = booking.columns

# Create a box plot for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(20, 6))
    #value_counts_sorted = expenses[column].value_counts().sort_index()  # Sort values by index
    #value_counts_sorted.plot(kind='bar')
    sns.histplot(booking[column])
    plt.title(f'Bar Plot of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

#Encoding
le = LabelEncoder()
for columns in numerical_columns:
  booking[columns] = le.fit_transform(booking[columns])

plt.figure(figsize = (20,10))
sns.heatmap(booking.corr(numeric_only = True), annot = True)

q1 = np.percentile(booking['average price'],0.25)
q3 = np.percentile(booking['average price'],0.75)
iqr = q3-q1
ul = q3 * (1.5 + iqr)
ll = q1 * (1.5 - iqr)
booking = booking[(booking['average price'] < ul)]
booking = booking[(booking['average price'] > ll)]

#Train Test Split
X = booking.iloc[:,:-1]
Y = booking.iloc[:,-1]
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2)

scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = LogisticRegression()
model.fit(X_train, Y_train)

y_pred = model.predict(X_test)

# Evaluate the model
acc = accuracy_score(Y_test, y_pred)
print("Accuracy:", acc)

precision = precision_score(Y_test, y_pred)
print("Precision:", precision)

recall = recall_score(Y_test, y_pred)
print("Recall:", recall)

f1 = f1_score(Y_test, y_pred)
print("F1 Score: ", f1)

print("Classification_Report: \n", classification_report(Y_test, y_pred))
print("Confusion_Matrix: \n", confusion_matrix(Y_test, y_pred))

